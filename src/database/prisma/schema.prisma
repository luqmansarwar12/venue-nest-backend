generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  CONTACT_SUPPORT
  INSPECTOR
  VENUE_OWNER
  VENUE_MANAGER
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BANNED
  DEACTIVATED
  DELETED
}

enum VenueType {
  WEDDING
  CONFERENCE
  BIRTHDAY
}

enum VenueStatus {
  CREATED
  ASSIGNED_TO_INSPECTOR
  PENDING_APPROVAL
  APPROVED
  DELETED
}

enum MenuType {
  STEAKS
  CHINEESE
  BEVERAGES
  DESSERTS
}

enum DishStatus {
  COMING_SOON
  AVAILABLE
  UNAVAILABLE
  DISCONTINUED
}

enum BookingStatus {
  PENDING_APPROVAL
  APPROVED
  CHECKED_OUT
  PAID
}

enum PaymentType {
  CASH
  CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  FAILED
  REFUNDED
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  phone     String     @unique
  role      UserRole
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  venues           Venue[]
  bookings         Booking[]
  paymentsMade     Payment[]   @relation("PaymentsMade")
  paymentsReceived Payment[]   @relation("PaymentsReceived")
  superAdmin       SuperAdmin? @relation("SuperAdminUser")
  venueOwner       VenueOwner? @relation("VenueOwnerUser")
  customer         Customer?   @relation("CustomerUser")
  address          Address[]   @relation("UserAddress")
}

model SuperAdmin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(name: "SuperAdminUser", fields: [userId], references: [id])
}

model VenueOwner {
  id              String @id @default(uuid())
  businessLicense String @map("business_license")
  experienceYears Int    @map("experience_years")
  userId          String @unique @map("user_id")
  user            User   @relation(name: "VenueOwnerUser", fields: [userId], references: [id])
}

model Customer {
  id     String @id @default(uuid())
  userId String @unique @map("user_id")
  user   User   @relation(name: "CustomerUser", fields: [userId], references: [id])
}

model Address {
  id        String  @id @default(uuid())
  street    String
  city      String
  state     String
  zipCode   String  @map("zip_code")
  country   String
  longitude Float?
  latitude  Float?
  isPrimary Boolean @default(true) @map("is_primary")

  userId String? @map("user_id")
  user   User?   @relation("UserAddress", fields: [userId], references: [id])

  venueId String? @map("venue_id")
  venue   Venue?  @relation("VenueAddress", fields: [venueId], references: [id])
}

model Venue {
  id             String      @id @default(uuid())
  name           String
  capacity       Int
  status         VenueStatus @default(CREATED)
  pricePerPerson Float       @map("price_per_person")
  openingTime    DateTime    @map("opening_time")
  closingTime    DateTime    @map("closing_time")
  venueType      VenueType   @map("venue_type")

  menus    Menu[]
  bookings Booking[]
  address  Address[] @relation("VenueAddress")
  ownerId  String    @map("owner_id")
  owner    User      @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
}

model Menu {
  id          String       @id @default(uuid())
  venueId     String       @map("venue_id")
  venue       Venue        @relation(fields: [venueId], references: [id])
  name        String
  description String
  menuType    MenuType     @map("menu_type")
  dishes      DishOnMenu[]
  bookings    Booking[]
  createdAt   DateTime     @default(now()) @map("created_at")
}

model Dish {
  id          String       @id @default(uuid())
  name        String
  price       Float
  priceUnit   String       @map("price_unit")
  ingredients String[]
  menu        DishOnMenu[]
  status      DishStatus   @default(AVAILABLE)
  createdAt   DateTime     @default(now()) @map("created_at")
}

model DishOnMenu {
  id        String   @id @default(uuid())
  dishId    String   @map("dish_id")
  dish      Dish     @relation(fields: [dishId], references: [id])
  menuId    String   @map("menu_id")
  menu      Menu     @relation(fields: [menuId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
}

model Booking {
  id              String   @id @default(uuid())
  customerId      String   @map("customer_id")
  customer        User     @relation(fields: [customerId], references: [id])
  venueId         String   @map("venue_id")
  venue           Venue    @relation(fields: [venueId], references: [id])
  menuId          String   @map("menu_id")
  menu            Menu     @relation(fields: [menuId], references: [id])
  guestCount      Int      @map("guest_count")
  startTime       DateTime @map("start_time")
  endTime         DateTime @map("end_time")
  status          String
  totalPrice      Float    @map("total_price")
  negotiatedPrice Float    @map("negotiated_price")
  ownerRemarks    String   @map("owner_remarks")
  payment         Payment?
  createdAt       DateTime @default(now()) @map("created_at")
}

model Payment {
  id          String        @id @default(uuid())
  bookingId   String        @unique @map("booking_id")
  booking     Booking       @relation(fields: [bookingId], references: [id])
  payerId     String        @map("payer_id")
  payer       User          @relation(name: "PaymentsMade", fields: [payerId], references: [id])
  receiverId  String        @map("receiver_id")
  receiver    User          @relation(name: "PaymentsReceived", fields: [receiverId], references: [id])
  advancePaid Float         @map("advance_paid")
  pendingBill Float         @map("pending_bill")
  paymentType PaymentType   @map("payment_type")
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
}
